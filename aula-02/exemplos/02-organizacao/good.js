// ‚úÖ EXEMPLO DE C√ìDIGO BEM ORGANIZADO
// Fluxo de pedido: valida√ß√£o de idade, escolha de endere√ßo, c√°lculo de frete, fechamento

/*
üß† Por que esse c√≥digo est√° bem escrito e organizado?

- Ordem l√≥gica do fluxo: valida√ß√µes s√£o feitas antes de a√ß√µes dependentes delas (ex: s√≥ calcula frete depois de validar idade e endere√ßo).
- Responsabilidades separadas: cada fun√ß√£o cuida de um peda√ßo espec√≠fico do processo (validar, calcular, coordenar).
- Fun√ß√£o principal clara: a `fecharPedido` funciona como um "roteiro" do que acontece ‚Äî √© f√°cil de entender o passo a passo da opera√ß√£o.
- Nomes descritivos: as fun√ß√µes dizem exatamente o que fazem (`validarIdade`, `enderecoValido`, `calcularFrete`).
- C√≥digo test√°vel: todas as partes podem ser testadas de forma isolada (testar s√≥ a valida√ß√£o de idade, por exemplo).
*/

///////////////////////
// 1. Fun√ß√£o principal
///////////////////////

function fecharPedido(pedido, cliente, endereco) {
  if (!validarIdade(cliente)) {
    console.log("Cliente n√£o pode realizar o pedido");
    return;
  }

  if (!enderecoValido(endereco)) {
    console.log("Endere√ßo inv√°lido");
    return;
  }

  const frete = calcularFrete(endereco.cep);
  if (frete === null) {
    console.log("N√£o foi poss√≠vel calcular o frete");
    return;
  }

  console.log("Pedido fechado com sucesso!", pedido);
}

////////////////////////
// 2. Valida√ß√µes
////////////////////////

function validarIdade(cliente) {
return cliente.idade >= 18;
}

function enderecoValido(endereco) {
return endereco.rua && endereco.numero && endereco.cep;
}

////////////////////////
// 3. Utilit√°rios
////////////////////////

function calcularFrete(cep) {
if (!cep) return null;
// Simula√ß√£o de c√°lculo de frete com base no CEP
return 15.9;
}